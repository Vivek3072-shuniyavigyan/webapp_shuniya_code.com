import { Row, Col, Card } from "react-bootstrap";
import "./articleData.css";

const articlesHindi = [
  {
    title: "भव यद तद(if else)",
    titleURL: "भव यद तद(if else)".replace(/\s+/g, "-").toLowerCase(),
    texts: [
      "वास्तविक जीवन में ऐसे हालात आते हैं जब हमें कुछ निर्णय लेने की आवश्यकता होती है और इन्हीं निर्णयों के आधार पर हम तय करते हैं कि हमें आगे क्या करना चाहिए। प्रोग्रामिंग में भी ऐसी ही स्थितियाँ उत्पन्न होती हैं जहाँ हमें कुछ निर्णय लेने की आवश्यकता होती है।",
      "भव में उपलब्ध निर्णय लेने के बयान हैं:",
      <ul>
        <li>यद स्टेटमेंट</li>
        <li>यद..तद स्टेटमेंट</li>
        <li>नेस्टेड यद स्टेटमेंट</li>
      </ul>,
      <Card.Subtitle className="pt-4">
        <h3>यद स्टेटमेंट</h3>
      </Card.Subtitle>,
      "यद स्टेटमेंट सबसे सरल है। इसका उपयोग यह तय करने के लिए किया जाता है कि एक निश्चित बयान या बयान के ब्लॉक को निष्पादित किया जाएगा या नहीं, यानी यदि कोई निश्चित बयान सत्य है तो बयान के एक ब्लॉक को निष्पादित किया जाता है अन्यथा नहीं।",
      <pre className="syntax">
        {"यद "}
        <em>स्थिति </em>
        {":\n\t# निष्पादित करने के लिए कथन यद \n\t# स्थिति सच है"}
      </pre>,
      <div>
        {
          "यहां, मूल्यांकन के बाद की स्थिति या तो सही होगी या गलत। यदि कथन बूलियन मान स्वीकार करता है - यदि मान सत्य है तो यह नीचे दिए गए कथनों के ब्लॉक को निष्पादित करेगा अन्यथा नहीं। हम इसका उपयोग कर सकते हैं "
        }
        <em>स्थिति</em>
        {"    ब्रैकेट '(' ')' के साथ भी।"}
      </div>,
      "जैसा कि हम जानते हैं, भव एक ब्लॉक की पहचान करने के लिए इंडेंटेशन का उपयोग करता है। तो नीचे दिए गए उदाहरण में दिखाए गए अनुसार एक if स्टेटमेंट के तहत ब्लॉक की पहचान की जाएगी:",
      <h4>सिंटेक्स </h4>,
      <pre className="syntax">
        {"यद "}
        <em>स्थिति</em>
        {":\n\tस्टेटमेंट 1"}
      </pre>,
      <h4>उदाहरण</h4>,
      <pre className="syntax">
        {"क = 10\nयद क>=0"}
        {":\n\tपश्य ('पॉजिटिव')"}
      </pre>,
      <h4>परिणाम</h4>,
      <pre className="output">{"पॉजिटिव"}</pre>,
      <img
        src="https://media.geeksforgeeks.org/wp-content/uploads/if-statement.jpg"
        alt=""
        width={200}
      />,
      <Card.Subtitle className="pt-4">
        <h3>यद-तद स्टेटमेंट</h3>
      </Card.Subtitle>,
      <div>
        {
          "यद केवल हमें बताता है कि यदि कोई शर्त सत्य है तो वह कथनों के एक ब्लॉक को निष्पादित करेगा और यदि शर्त गलत है तो ऐसा नहीं होगा। लेकिन क्या होगा अगर हम कुछ और करना चाहते हैं अगर शर्त झूठी है। ये आ गया"
        }
        <em>तद</em>
        {" स्टेटमेंट . हम उपयोग कर सकते हैं"} <em>तद</em>
        {
          " स्टेटमेंट यद स्थिति गलत होने पर कोड के ब्लॉक को निष्पादित करने के लिए कथन के साथ।"
        }
      </div>,
      <pre className="card-bg">
        {"यद "}
        <em>स्थिति</em>
        {
          ":\n\t# इस ब्लॉक को निष्पादित करता है अगर \n\t# स्थिति सच है\nतद:\n\t# इस ब्लॉक को निष्पादित करता है अगर\n\t# स्थिति झूठी है"
        }
      </pre>,
      <img
        src="https://media.geeksforgeeks.org/wp-content/uploads/if-else.jpg"
        alt=""
        width={200}
      />,
      "तद कथन के बाद कोड के ब्लॉक को निष्पादित किया जाता है क्योंकि यद कथन में मौजूद स्थिति गलत है, तो उस कथन को कॉल करें जो ब्लॉक में नहीं है (रिक्त स्थान के बिना)।",
    ],
  },
  {
    title: "भव हर(for) लूप",
    titleURL: "भव हर(for) लूप".replace(/\s+/g, "-").toLowerCase(),
    texts: [
      "किसी एक ही प्रक्रिया को एक से अधिक बार लगातार प्रयोग करना केवल समय की बर्बादी  माना जाता हैं,क्योकि बिना रुके एक ही चीज दौरान उबाऊ  होता हैं| ",
      "ठीक इसी प्रकार गणक विज्ञान(programming) में भी ऐसी रूकावट को दूर करने के लिए  'हर' (for) व्यूह का प्रयोग किया जाता हैं !",
      "'हर' व्यूह गणक(programmer) को अनेक बार एक चीज को दौरान से बचाकर खुद यह काम कर लेता हैं जिससे समयकाल(time complexity) और भूकाल(space complexity) दोनों की बचत होती हैं",

      <h4>उदाहरण</h4>,
      "यदि गणक 'हेलो !' को पांच बार स्क्रीन  पर दिखाना  चाहता हैं तो वो कुछ इस प्रकार करेगा :",
      <pre className="syntax">
        {"पश्य ('हेलो !')"}
        {"\n\t>> हेलो !\n"}
        {"पश्य ('हेलो !')"}
        {"\n\t>> हेलो !\n"}
        {"पश्य ('हेलो !')"}
        {"\n\t>> हेलो !\n"}
        {"पश्य ('हेलो !')"}
        {"\n\t>> हेलो !\n"}
        {"पश्य ('हेलो !')"}
        {"\n\t>> हेलो !"}
      </pre>,
      "लेकिन यदि इसी कोड को हर व्यूह  की सहायता से किया जाए तो ये कुछ इस प्रकार होगा :",
      <pre className="syntax">
        {" हर क रेंज (0,5) में :\n\tपश्य ('हेलो !')"}
      </pre>,
      <h4>परिणाम</h4>,
      <pre className="output">{"हेलो !\nहेलो !\nहेलो !\nहेलो !\nहेलो !"}</pre>,
      " उपर बताये गए उदहारण से देखा जा सकता हे की हर के प्रयोग से गणक का कार्य बहुत अधिक आसानी से कम समयकाल(time complexity) और भूकाल(space complexity) में हो जाता हैं जो की कोड को आकर्षित बनाने में भी उपयोगी हैं जो की हर व्यूह को आकर्षित बनाता हैं !",
      " इसके आलावा गणक विज्ञान (programming)में  बहुत बार हमें एक से अधिक वस्तुओ के समूह की प्रत्येक वस्तु को स्क्रीन पर दर्शाना (print) होता हैं जो की हम हर व्यूह की सहायता से बहुत आसानी से कर सकते हैं ,कुछ इस प्रकार से :-",
      <h4>उदाहरण</h4>,
      <pre>
        {
          "मान लेते हे की एक त्रम(array) जिसका नाम समूह हैं \n\t समूह =[1 ,2 ,3 ,4 ] \nबिना हर व्यूह  की सहायता से(without for loop) :"
        }
      </pre>,
      <pre className="syntax">
        {
          "पश्य ( समूह[0])\n>> 1\nपश्य ( समूह[1])\n>> 2\nपश्य ( समूह[2])\n>> 3\nपश्य ( समूह[3])\n>> 4"
        }
      </pre>,
      <pre>
        {
          "हर व्यूह  की सहायता से(with for loop) :\n\tहर क रेंज  समूह में:\n\t\tपश्य (समूह)"
        }
      </pre>,
      <h4>परिणाम</h4>,
      <pre className="output">{"1\n2\n3\n4"}</pre>,
      <h4>अन्य उदाहरण</h4>,
      <pre>
        {
          "(1) एक त्रम (array)दिया गया है जिसका नाम एक हैं ,\n\tएक =['बड़ा','छोटा ','बहुत']\nत्रम एक के सभी वस्तुओ को हर व्यूह की सहायता से स्क्रीन पर दो बार दिखाए !\n\nकोड:-"
        }
      </pre>,
      <pre className="syntax">
        {"हर क रेंज एक में :\n\tपश्य (क)\n\tपश्य (क)"}
      </pre>,
      <pre>{"परिणाम:-"}</pre>,
      <pre className="output">{"बड़ा\nबड़ा\nछोटा\nछोटा\nबहुत\nबहुत"}</pre>,
      <pre>
        {
          "व्याख्या(explaination):\nहमें एक त्रम दिया गया हैं जिसका नाम एक हैं और उसमे तीन वस्तुए दी गयी हैं और हमें प्रत्येक वस्तु को दो बार स्क्रीन पर दिखाना हैं जिसके लिए हमने एक कोड लिखा हैं जिसकी पहली लाइन में हम त्रम की हर वस्तु को एक एक करके देख रहे हैं और दूसरी और तीसरी लाइन में हम हर वस्तु को पश्य की सहायता से स्क्रीन पर दिखा रहे  हैं और 'हर' व्यूह की मदद से हम ऐसा प्रत्येक वस्तु के लिए कर पा रहे हैं !"
        }
      </pre>,
      <h5>ध्यान दें(notice it):</h5>,
      <pre>
        {
          " यदि इसी कोड को हम कुछ इस तरह लिखे-\n\tहर क रेंज एक में :\n\t\tपश्य (क)\n\t\t\tपश्य (क)\n\n>>गलत कोडेनिती\t#तो हमे स्क्रीन पर गलती का सन्देश प्राप्त होगा\n#indentation error"
        }
      </pre>,
      <pre>
        {
          "सार\nहर व्यूह के अंदर हमे प्रत्येक लाइन के पहले आने वाले रिक्त स्थानो(indentation) पर ध्यान देना  जरुरी हैं वो प्रत्येक लाइन में एक समान होना अनिवार्य हैं, दिए गए कोड की दूसरी और तीसरी लाइन में रिक्त स्थान बराबर न होने के  कारन हमारी कोडनिति गलत मानी जाएगी !"
        }
      </pre>,
      <pre>
        {
          "(2) एक त्रम दिया गया है जिसका नाम बुक्स  हैं,\n\tबुक्स =[रामयण ,गीता,महाभारत]\nत्रम बुक्स की प्रत्येक वस्तु के बाद त्रम बुक्स  को एक बार फिर स्क्रीन पर दिखाना हैं !\n\nकोड:-"
        }
      </pre>,
      <pre className="syntax">
        {
          "हर क रेंज बुक्स में :\n\tपश्य (क)\n\tहर द रेंज बुक्स में :\n\t\tपश्य (द)"
        }
      </pre>,
      <pre>{"परिणाम:-"}</pre>,
      <pre className="output">
        {
          "रामयण\nरामयण\nगीता\nमहाभारत\nगीता\nरामयण\nगीता\nमहाभारत\nमहाभारत\nरामयण\nगीता\nमहाभारत"
        }
      </pre>,
      <h4>सारांश(summary):-</h4>,
      "प्रस्तुत लेखन  में हमने हर व्यूह के बारे में जानकारी प्राप्त की हैं जो की हमे यह बताता हैं की गणन  विज्ञान में गणक को एक प्रक्रिया को बारबार दोहराने की जरुरत नहीं हैं उसके स्थान पर गणक 'हर' व्यूह का प्रयोग कर अपना समय और कोड का समयकाल व भूकाल को काम करके  कोड को आकर्षित बना सकता हैं ! जो की हर व्यूह की उपयोगिता को गणन[ विज्ञान में  बड़ा देता हैं !",
    ],
  },
  {
    title: "भव जबतक(while) लूप",
    titleURL: "भव जबतक(while) लूप".replace(/\s+/g, "-").toLowerCase(),
    texts: [
      "किसी एक ही प्रक्रिया को एक से अधिक बार दोरोने की समस्या, जिसके बारेमे हमने 'हर' व्यूह में चर्चा की हैं उसी समस्या का समाधान हम एक और व्यूह से कर सकते हैं जिसका नाम 'जबतक' व्यूह हैं ! 'जबतक' व्यूह ठीक हर व्यूह के सामान ही गणक को कोड लिखते समय एक चीज को दौरान से बचाकर स्वयं यह कार्य कर लेता हैं!",
      "'हर' व 'जबतक' व्यूह लगभग एक ही सामान हैं अंतर सिर्फ  इतना हे की हर व्यूह का प्रयोग हम तबग करते हैं जब हमे व्यूह के अंत के बारे में जानकारी होती हैं उसकी दूसरी तरफ 'जबतक' व्यूह का प्रयोग हम कोड के अंत की जानकारी होने क बाद ही करते हें !",
      '"जबतक" व्यूह भी  गणक को अनेक बार एक चीज को दौरान से बचाकर खुद यह काम कर लेता हैं जिससे समयकाल और भूकाल दोनों की बचत होती हैं !',
      "इसे हम एक उदहारण से पूरी तरह समजने की कोशिश करेंगे ,",
      "जैसे की मान लेते हें की हमे एक मंदिर जाना है जहा तक पहुंचने के लिए हमे 100 सिडिया चढ़नी पड़ेगी जो की तय हैं इसीलिए इसे हम हर व्यूह के अंदर लेंगे इसके विपरीत अगर मानलो की हमे एक पहाड़ पर जाना हैं जो की बहुत उचाई पर हें तोह यहाँ हमे तब तक चढ़ना हें जबतक हम पहाड़ पर नहीं पहुंच जाते हैं जहा  तक पहुंचने में कितना चलना पड़ेगा यह तय नहीं हें तोह इसे हम जबतक व्यूह मे लेंगे!",
      <h4>उदाहरण</h4>,
      "यदि गणक 'हेलो !' को पांच बार स्क्रीन  पर दिखाना  चाहता हैं तो वो कुछ इस प्रकार करेगा :",
      <pre className="syntax">
        {"पश्य ('हेलो !')"}
        {"\n\t>> हेलो !\n"}
        {"पश्य ('हेलो !')"}
        {"\n\t>> हेलो !\n"}
        {"पश्य ('हेलो !')"}
        {"\n\t>> हेलो !\n"}
        {"पश्य ('हेलो !')"}
        {"\n\t>> हेलो !\n"}
        {"पश्य ('हेलो !')"}
        {"\n\t>> हेलो !"}
      </pre>,
      "लेकिन यदि इसी कोड को जबतक व्यूह  की सहायता से किया जाए तो ये कुछ इस प्रकार होगा :",
      <pre className="syntax">
        {'क=0\nजबतक क<5:\n\tपश्य ("हेलो !")\n\tक=क+1'}
      </pre>,
      <h4>परिणाम</h4>,
      <pre className="output">{"हेलो !\nहेलो !\nहेलो !\nहेलो !\nहेलो !"}</pre>,
      "उपर बताये गए उदहारण से देखा जा सकता हे की जबतक के प्रयोग से गणक का कार्य बहुत अधिक आसानी से कम समयकाल(time complexity) और भूकाल (space complexity)में हो जाता हैं जो की कोड को आकर्षित बनाने में भी उपयोगी हैं जो की जबतक व्यूह को आकर्षित बनाता हैं !",
      '"जबतक" व्यूह के  मुख्य नियम :',
      "(क) चर की स्थिति की जांच करे (check the condition)",
      "(ख) कोड को प्रिंट कराये (print the statement)",
      "(ग ) चर को अपडेट करे (update the variable)",
      'अधिकतर  देखा गया हैं की "जबतक" व्यूह का प्रयोग एक  से ज्यादा स्थति को जांच करने के लिए जाता हैं| जैसे : ',
      <pre className="syntax">
        {"क=45\nख=80\nजबतक क<50 च  ख<100 :\n\tपश्य(क,ख)\n\tक=क+1\n\tख=ख+1"}
      </pre>,
      <h4>परिणाम</h4>,
      <pre className="output">{"45 80\n46 81\n47 82\n48 83\n49 84"}</pre>,
      "जबतक व्यूह का प्रयोग लगातार चलने वाले कोड के लिए भी किया जाता हें ,जैसे :",
      <pre>{'जबतक सत :\n\tपश्य("हेलो!")'}</pre>,
      'सत स्थति हमेसा ही सही होगी तो यह कोड लगातार प्रिंट होता रहेगा इसी प्रकार के व्यूह को अंत करने के लिए दूसरे बयान का प्रयोग किया जाता हें जैसेकि "खंडन" (break) जिसके बारे में हम आगे विस्तार से जानकारी प्राप्त करेंगे !',
      <h4>सारांश:-</h4>,
      'प्रस्तुत लेखन में हमने "जबतक" व्यूह के बारे में जाना हैं जिससे हमे यह पता चलता हैं की एक प्रक्रिया कोको दोहराने से बचने के लिए हम हर व्यूह के साथ साथ जबतक व्यूह का प्रयोग भी कर सकते हैं ,जबतक व्यूह का प्रयोग अंत निश्चित न होने पर किया जाता हैं !',
    ],
  },
  {
    title: "भव खंडन(break) कथन",
    titleURL: "भव खंडन(break) कथन".replace(/\s+/g, "-").toLowerCase(),
    texts: [
      "भव भाषा में व्यूह का प्रयोग किसी कार्य को दोहराने में हमारी सहायता करके हमारे कोड को आकर्षित बनाता हैं लेकिन बहुत बार ऐसी परिस्थति आ जाती हैं जब हमे व्यूह को पूरी तरह बिच में छोड़ना पड़ता हैं या किसी कथन को छोड़कर आगे का व्यूह दर्शना होता हैं तब हम व्यूह नियंत्रण कथन (loop  control  statement ) का प्रयोग करते हैं भव भाषा में कुल तीन प्रकार के व्यूह नियंत्रण  स्टेटमेंट  बताये गये  हैं :",
      <ul>
        <li>खंडन (break)</li>
        <li>सतत (continue)</li>
        <li>जाना (pass)</li>
      </ul>,
      "इस लेखन में हम खंडन के बारे में विस्तार से जानेंगे :-",
      "भव में खंडन स्टेटमेंट हमे व्यूह के बाहर आने पर नियंत्रण करने योग्य बनाता हैं खंडन स्टेटमेंट हमेसा व्यूह के अंदर लिखा जाता हैं ,",
      <h4>उदहरण</h4>,
      <pre>
        {
          "(1) क='रमयण'  जबतक 'क' शब्द में 'य' न आजाए  सभी अक्षरों को स्क्रीन पर दिखाए \n\nकोड :"
        }
      </pre>,
      <pre className="syntax">
        {"क='रमयण'\nहर ख क में :\n\tपश्य (ख)\n\tयद ख=='य':\n\t\tखंडन"}
      </pre>,
      <h4>परिणाम</h4>,
      <pre className="output">{"र\nम\nय"}</pre>,
    ],
  },
  {
    title: "भव सतत(continue) कथन",
    titleURL: "भव सतत(continue) कथन".replace(/\s+/g, "-").toLowerCase(),
    texts: [
      "भव भाषा में व्यूह का प्रयोग किसी कार्य को दोहराने में हमारी सहायता करके हमारे कोड को आकर्षित बनाता हैं लेकिन बहुत बार ऐसी परिस्थति आ जाती हैं जब हमे व्यूह को पूरी तरह बिच में छोड़ना पड़ता हैं या किसी कथन को छोड़कर आगे का व्यूह दर्शना होता हैं तब हम व्यूह नियंत्रण कथन (loop  control  statement ) का प्रयोग करते हैं भव भाषा में कुल तीन प्रकार के व्यूह नियंत्रण  स्टेटमेंट  बताये गये  हैं :",
      <ul>
        <li>खंडन (break)</li>
        <li>सतत (continue)</li>
        <li>जाना (pass)</li>
      </ul>,
      "इस लेखन में हम सतत के बारे में विस्तार से जानेंगे :-",
      "भव में  सतत भी खंडन की तरह एक व्यूह नियंत्रण स्टेटमेंट हैं सतत स्टेटमेंट खंडन स्टेटमेंट के बिलकुल विपरीत होता हें यह हमे व्यूह को ख़तम करने की जगह व्यूह के अगले स्टेटमेंट को दर्शाने के लिए सहायक होता हैं,सतत  हमे चल रहे स्टेटमेंट को छोड़कर उसके अगले स्टेटमेन्ट को स्क्रीन पर दर्शाने क लिए मदद करता हैं|",
      <h4>उदहरण</h4>,
      <pre>
        {
          "(1) क=10 ->5 को छोड़कर 0 से 9  तक सभी नंबर को स्क्रीन पर दिखाए : \n\nकोड :"
        }
      </pre>,
      <pre className="syntax">
        {"क=10\nजबतक क>0 :\n\tक=क-1\n\tयद क==5:\n\t\tसतत\n\tपश्य (क)"}
      </pre>,
      <h4>परिणाम</h4>,
      <pre className="output">{"9\n8\n7\n6\n5\n4\n3\n2\n1\n0"}</pre>,
    ],
  },
  {
    title: "भव जाना(pass) कथन",
    titleURL: "भव जाना(pass) कथन".replace(/\s+/g, "-").toLowerCase(),
    texts: [
      "भव भाषा में व्यूह का प्रयोग किसी कार्य को दोहराने में हमारी सहायता करके हमारे कोड को आकर्षित बनाता हैं लेकिन बहुत बार ऐसी परिस्थति आ जाती हैं जब हमे व्यूह को पूरी तरह बिच में छोड़ना पड़ता हैं या किसी कथन को छोड़कर आगे का व्यूह दर्शना होता हैं तब हम व्यूह नियंत्रण कथन (loop  control  statement ) का प्रयोग करते हैं भव भाषा में कुल तीन प्रकार के व्यूह नियंत्रण  स्टेटमेंट  बताये गये  हैं :",
      <ul>
        <li>खंडन (break)</li>
        <li>सतत (continue)</li>
        <li>जाना (pass)</li>
      </ul>,
      "इस लेखन में हम जाना के बारे में विस्तार से जानेंगे :-",
      "जाना सटटेमनेट एक खाली स्टेटमेंट होता हैं जाना स्टेटमेंट ठीक कोड में दी गयी टिप्पणी के समान होता हैं फरक सिर्फ इतना होता ह की टिप्पणी को कोड चलाते समय नजरंदाज कर दिया जाता हैं जबकि जाना स्टेटमेंट को नजरंदाज नही  किया जाता हैं जब गणक स्क्रीन पर कुछ भी प्रिंट नहीं करना चाहता हो तब जाना स्टेटमेंट का प्रयोग किया जाता हैं|",
      <h4>उदहरण</h4>,
      <pre>{"(1) कोड :"}</pre>,
      <pre className="syntax">
        {"क = 10\nख = 20\nयद(क<ख):\n\tजाना\nतद:\n\tपश्य('ख<क')"}
      </pre>,
      <pre>{"(2) कोड :"}</pre>,
      <pre className="syntax">
        {
          "एक =['अ','ब','ह', 'ड']\nहर क एक में :\n\tयद(क=='अ'):\n\t\tजाना\n\tतद:\n\t\tपश्य (क)"
        }
      </pre>,
      <h4>परिणाम</h4>,
      <pre className="output">{"ब\nह\nड"}</pre>,
    ],
  },
  {
    title: "भव में इनपुट लेना",
    titleURL: "भव में इनपुट लेना".replace(/\s+/g, "-").toLowerCase(),
    texts: [
      " गणन विज्ञान (programming) में बहुत बार डेवेलपर्स को किसी परिणाम को दिखने क लिए या कोइ डाटा लेने के लिए यूजर से जुड़े रहने पड़ता हैं ,भव हमे इनपुट नामक फलम (function ) प्रदान करता हैं जो हमे कीबोर्ड से डाटा लेने में सहायक होता हैं !",
      <h3>इनपुट()</h3>,
      "इनपुट () भव में उपलब्ध एक फलम हैं जो यूजर से इनपुट लेने के बाद ही कोड को चलता हैं ,यूजर द्वारा गलत इनपुट देने पर यह फलम स्क्रीन पर गलती बताकर यूजर को वापस इनपुट देने का सन्देश देता हैं !",
      <h4>उदहरण</h4>,
      <pre className="syntax">{'क=इनपुट("नंबर लिखिए :")\nपश्य(क)'}</pre>,
      <h4>परिणाम</h4>,
      <pre className="output">{"नंबर लिखिए :98\n98"}</pre>,
      <h4>विशेष :</h4>,
      "(1) यदि कोड में इनपुट  फलम का इस्तमाल किया गया हैं तो यूजर के इनपुट देने तक कोड नहीं चलेगा।",
      "(2) यूजर को इनपुट देने का सन्देश गणक अपनी इच्छानुसार दे सकत हैं | ",
      "(3) फलम 'इनपुट' यूजर द्वारा दिए गए इनपुट को हमेसा एक शब्द की तरह लेगा अर्थात यदि हमे प्लुत ,अंक आदि अन्य इनपुट चाइये तो हमे टीपेकास्टिंग (typecasting ) का इस्तमाल करके दिए गए इनपुट का रूप बदलना होगा !",
      <h4>उदहरण</h4>,
      <pre className="syntax">
        {
          'क=इनपुट("पहला नंबर दीजिये:")\nख= इनपुट("दूसरा नंबर दीजिये:")\nग=क+ख\nपश्य(ग)'
        }
      </pre>,
      <h4>परिणाम</h4>,
      <pre className="output">
        {"पहला नंबर दीजिये:3\nदूसरा नंबर दीजिये:5\n8"}
      </pre>,
    ],
  },
  {
    title: "भव प्रोग्रामिंग भाषा",
    titleURL: "भव प्रोग्रामिंग भाषा".replace(/\s+/g, "-").toLowerCase(),
    texts: [
      "भव प्रोग्रामिंग भाषा हिंदी में प्रोग्रामिंग करने के  लिए उपलब्ध एक मात्र भाषा हैं भव प्रोग्रामिंग भाषा में हम पूरी प्रोग्रामिंग हिंदी में करने के लिए सक्षम हो जाते हैं भव भाषा कई रूप मे पाइथन के सामान बताई जाती हैं अर्थात गणक विज्ञान को हिंदी में उपलब्ध करने में भव भाषा बहुत ही आवश्यक मानी बताई गयी  हैं |",
      "यह भव टुटोरिअल किसी भी गणक को भव प्रोग्रामिंग भाषा को पूरी तरह सिखने में सहायक हैं इसमें भव  भाषा के सभी हिस्सों को पूरी  व्याख्या  के साथ उदहारण देके समझाया गया हैं !",
    ],
  },
  {
    title: "भव के कीवर्ड",
    titleURL: "भव के कीवर्ड".replace(/\s+/g, "-").toLowerCase(),
    texts: [
      "(1) सत =इसका प्रयोग किसी स्टेटमेंट के सही(1) होने पर स्क्रीन पर सही दर्शाने के लिए किया जाता हैं !",
      <h4>उदहरण</h4>,
      <pre className="syntax">{"पश्य (1)\n>> सत"}</pre>,
      "(2) असत =इसका प्रयोग किसी स्टेटमेंट के गलत (0)होने पर स्क्रीन पर गलत दर्शाने के लिए किया जाता हैं !",
      <h4>उदहरण</h4>,
      <pre className="syntax">{"पश्य (0)\n>> असत"}</pre>,
      "(3) च = यह ऑपरेटर संख्या में प्राप्त होने वाली पहली असत संख्या को दर्शाता हैं और असत संख्या न मिलने पर यह आखरी संख्या को दर्शाता हैं!",
      <h4>उदहरण</h4>,
      <pre className="syntax">{"3 च 0\n>> 0\n\n3 च 12\n>> 12"}</pre>,
      "(4) या= यह ऑपरेटर संख्या में प्राप्त होने वाली पहली सत संख्या को दर्शाता हैं और सत संख्या न मिलने पर यह आखरी संख्या को दर्शाता हैं!",
      <h4>उदहरण</h4>,
      <pre className="syntax">{"3 या 0\n>> 0\n\n3 या 12\n>> 12"}</pre>,
      "(5) न=यह ओपेरेटर संख्या को उल्टा  करने में मदत करता हैं मतलब सात संख्या को असत और असत संख्या को सात बना देता हैं !",
      <h4>उदहरण</h4>,
      <pre className="syntax">{"न 0\n>>1\n\nन 1\n>>0"}</pre>,
      "(6) वद्=यह फलम हमे कोड की यथार्थता को बताता हैं यदि स्टेटमेंट सत हैं तो कुछ भी नहीं होगा लेकिन स्टेटमेंट के गलत होने पर यह  वद्  एरर दर्शाता हैं!",
      "(7) खंडन= खंडन का प्रयोग व्यूह के प्रवाह को रोकने के लिए किया जाता हैं मतलब की खंडन हमे व्यूह को छोड़कर सीधा व्यूह के बहार पंहुचा देता हैं !",
      "(8) सतत= सतत हमे कोड के प्रवाह को रोकने के लिए सहायक होता हैं मतलब की यह हमे व्यूह क अंत पर न पंहुचा कर तुरंत आने वाले स्टेटमेंट को छोड़कर अगले स्टेटमेंट तक पंहुचा देता हैं !",
      "(9) वर्ग= वर्ग हमे यूजर द्वारा बनाये गए वर्गों को तय करने में मदत करता हैं !",
      "(10) रच =यह कीवर्ड हमे यूजर द्वारा बनाये गए फलम को घोषित करने में सहायक होता हैं !",
      "(11) यद=यद एक व्यूह कण्ट्रोल स्टेटमेंट हैं जो यद के स्टेटमेंट के  सत होने पर यद का कोड  दर्शाता हैं !",
      "(12) तद=यद का स्टेटमेंट असत होने पर तद का स्टेटमेंट दर्शाया जाता हैं !",
      "(13) एतद=यह भी एक व्यूह कण्ट्रोल स्टेटमेंट हैं जो दो से ज्यादा संभावना को दर्शाने के लिए प्रयोग किया जाता हैं !",
      "(14) हन= किसी भी त्रम या कतार की किसी  वस्तु को त्रम  या कतार में से हटाने के लिए हन का प्रयोग किया जाता  हैं !",
    ],
  },
  {
    title: "भव कारक(operator)",
    titleURL: "भव कारक(operator)".replace(/\s+/g, "-").toLowerCase(),
    texts: [
      "आम तौर पर कारक का प्रयोग हम संख्याओं या चरो के बिच में अलग अलग प्रकार के ऑपरेशन्स करने के लिए करते हैं इस लेखन में हम उन सभी प्रकार के कारको के बारे में जानकारी प्राप्त करेंगे |",
    ],
  },
  {
    title: "अंकगणित कारक(arithmetic operator)",
    titleURL: "अंकगणित कारक(arithmetic operator)"
      .replace(/\s+/g, "-")
      .toLowerCase(),
    texts: [
      "अंकगणित कारक हमे चरो या संख्याओं  के बिच जोड़ ,गुना, बाकि ,भाग आदि तरह के ऑपरेशन्स करने में सहायक होता हैं |",
      <Row className="table" fluid>
        <Col
          className="col-md-2 padding-0 fw-bold"
          style={{ textAlign: "center" }}
        >
          <h4 style={{ color: "black" }}>
            <b>कारक</b>
          </h4>
          <ul className="list-unstyled">
            <li>+</li>
            <li>-</li>
            <li>*</li>
            <li>/</li>
            <li>//</li>
            <li>%</li>
            <li>**</li>
          </ul>
        </Col>
        <Col className="col-md-7 padding-0" style={{ textAlign: "center" }}>
          <h4 style={{ color: "black" }}>
            <b>व्याख्या</b>
          </h4>
          <ul className="list-unstyled">
            <li>दो चरो को जोड़ता हैं</li>
            <li>दो चरो को घटता हैं</li>
            <li>दो चरो को गुणा करता हैं</li>
            <li>पहले चर को दूसरे चर से भाग करता हैं</li>
            <li>
              पहले चर को दूसरे चर से भाग करके अंक के रूप में संख्या देता हैं
            </li>
            <li>पहले चर को दूसरे चर से भाग करने पर मिलने वाला शेष देता हैं</li>
            <li>पहले चर को दूसरे चर बार गुणा करता हैं</li>
          </ul>
        </Col>
        <Col
          className="col-md-2 padding-0 fw-bold"
          style={{ textAlign: "center" }}
        >
          <h4 style={{ color: "black" }}>
            <b>नियम</b>
          </h4>
          <ul className="list-unstyled">
            <li>क+ख</li>
            <li>क-ख</li>
            <li>क*ख</li>
            <li>क/ख</li>
            <li>क//ख</li>
            <li>क%ख</li>
            <li>क**ख</li>
          </ul>
        </Col>
      </Row>,
      <h4>उदहरण</h4>,
      <pre className="syntax">
        {
          "क=9\nख=5\nजोड़ =क+ख\nगटाव =क-ख\nगुणा=क*ख\nभाग=क/ख\nभागअंक=क//ख\nशेष=क%ख\nप=क**ख\n"
        }
        {
          "पश्य(जोड़)\nपश्य(गटाव)\nपश्य(गुणा)\nपश्य(भाग)\nपश्य(भागअंक)\nपश्य(शेष)\nपश्य(प)"
        }
      </pre>,
      <h4>परिणाम</h4>,
      <pre className="output">{"14\n4\n45\n1.8\n1\n4\n59049"}</pre>,
    ],
  },
];

export default articlesHindi;
