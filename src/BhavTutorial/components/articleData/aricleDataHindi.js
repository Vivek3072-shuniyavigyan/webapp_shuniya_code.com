import { Card } from "react-bootstrap";
import './articleData.css';

const articlesHindi = [
  {
    title: "भव यद तद(if else)",
    titleURL: "भव यद तद(if else)".replace(/\s+/g, "-").toLowerCase(),
    texts: [
      "वास्तविक जीवन में ऐसे हालात आते हैं जब हमें कुछ निर्णय लेने की आवश्यकता होती है और इन्हीं निर्णयों के आधार पर हम तय करते हैं कि हमें आगे क्या करना चाहिए। प्रोग्रामिंग में भी ऐसी ही स्थितियाँ उत्पन्न होती हैं जहाँ हमें कुछ निर्णय लेने की आवश्यकता होती है।",
      "भव में उपलब्ध निर्णय लेने के बयान हैं:",
      <ul>
        <li>यद स्टेटमेंट</li>
        <li>यद..तद स्टेटमेंट</li>
        <li>नेस्टेड यद स्टेटमेंट</li>
      </ul>, 
      <Card.Subtitle className="pt-4">
        <h3>यद स्टेटमेंट</h3>
      </Card.Subtitle>,
      "यद स्टेटमेंट सबसे सरल है। इसका उपयोग यह तय करने के लिए किया जाता है कि एक निश्चित बयान या बयान के ब्लॉक को निष्पादित किया जाएगा या नहीं, यानी यदि कोई निश्चित बयान सत्य है तो बयान के एक ब्लॉक को निष्पादित किया जाता है अन्यथा नहीं।",
    
      <pre className="syntax">
        {"यद "}
        <em>स्थिति </em>
        {":\n\t# निष्पादित करने के लिए कथन यद \n\t# स्थिति सच है"}
      </pre>,
      <div>
        {
          "यहां, मूल्यांकन के बाद की स्थिति या तो सही होगी या गलत। यदि कथन बूलियन मान स्वीकार करता है - यदि मान सत्य है तो यह नीचे दिए गए कथनों के ब्लॉक को निष्पादित करेगा अन्यथा नहीं। हम इसका उपयोग कर सकते हैं "
        }
        <em>स्थिति</em>
        {"    ब्रैकेट '(' ')' के साथ भी।"}
      </div>,
      "जैसा कि हम जानते हैं, भव एक ब्लॉक की पहचान करने के लिए इंडेंटेशन का उपयोग करता है। तो नीचे दिए गए उदाहरण में दिखाए गए अनुसार एक if स्टेटमेंट के तहत ब्लॉक की पहचान की जाएगी:",
      <h4>सिंटेक्स </h4>,
      <pre className="syntax">
        {"यद "}
        <em>स्थिति</em>
        {
          ":\n\tस्टेटमेंट 1"
        }
      </pre>,
      <h4>उदाहरण</h4>,
      <pre className="syntax">
        {"क = 10\nयद क>=0"}
        {
          ":\n\tपश्य ('पॉजिटिव')"
        }
      </pre>,
      <h4>परिणाम</h4>,
      <pre className="output">
        {"पॉजिटिव"}
      </pre>,
      <img
        src="https://media.geeksforgeeks.org/wp-content/uploads/if-statement.jpg"
        alt=""
        width={200}
      />,
      <Card.Subtitle className="pt-4">
        <h3>यद-तद स्टेटमेंट</h3>
      </Card.Subtitle>,
      <div>
        {
          "यद केवल हमें बताता है कि यदि कोई शर्त सत्य है तो वह कथनों के एक ब्लॉक को निष्पादित करेगा और यदि शर्त गलत है तो ऐसा नहीं होगा। लेकिन क्या होगा अगर हम कुछ और करना चाहते हैं अगर शर्त झूठी है। ये आ गया"
        }
        <em>तद</em>
        {" स्टेटमेंट . हम उपयोग कर सकते हैं"} <em>तद</em>
        {
          " स्टेटमेंट यद स्थिति गलत होने पर कोड के ब्लॉक को निष्पादित करने के लिए कथन के साथ।"
        }
      </div>,
      <pre className="card-bg">
        {"यद "}
        <em>स्थिति</em>
        {
          ":\n\t# इस ब्लॉक को निष्पादित करता है अगर \n\t# स्थिति सच है\nतद:\n\t# इस ब्लॉक को निष्पादित करता है अगर\n\t# स्थिति झूठी है"
        }
      </pre>,
      <img
        src="https://media.geeksforgeeks.org/wp-content/uploads/if-else.jpg"
        alt=""
        width={200}
      />,
      "तद कथन के बाद कोड के ब्लॉक को निष्पादित किया जाता है क्योंकि यद कथन में मौजूद स्थिति गलत है, तो उस कथन को कॉल करें जो ब्लॉक में नहीं है (रिक्त स्थान के बिना)।",
    ],
  },
  {
    title: "भव हर(for) लूप",
    titleURL: "भव हर(for) लूप".replace(/\s+/g, "-").toLowerCase(),
    texts: [
      "किसी एक ही प्रक्रिया को एक से अधिक बार लगातार प्रयोग करना केवल समय की बर्बादी  माना जाता हैं,क्योकि बिना रुके एक ही चीज दौरान उबाऊ  होता हैं| ",
      "ठीक इसी प्रकार गणक विज्ञान(programming) में भी ऐसी रूकावट को दूर करने के लिए  'हर' (for) व्यूह का प्रयोग किया जाता हैं !",
      "'हर' व्यूह गणक(programmer) को अनेक बार एक चीज को दौरान से बचाकर खुद यह काम कर लेता हैं जिससे समयकाल(time complexity) और भूकाल(space complexity) दोनों की बचत होती हैं",
    
      <h4>उदाहरण</h4>,
      "यदि गणक 'हेलो !' को पांच बार स्क्रीन  पर दिखाना  चाहता हैं तो वो कुछ इस प्रकार करेगा :",
      <pre className="syntax">
        {"पश्य ('हेलो !')"}
        {
          "\n\t>> हेलो !\n"
        }
        {"पश्य ('हेलो !')"}
        {
          "\n\t>> हेलो !\n"
        }
        {"पश्य ('हेलो !')"}
        {
          "\n\t>> हेलो !\n"
        }
        {"पश्य ('हेलो !')"}
        {
          "\n\t>> हेलो !\n"
        }
        {"पश्य ('हेलो !')"}
        {
          "\n\t>> हेलो !"
        }
      </pre>,
      "लेकिन यदि इसी कोड को हर व्यूह  की सहायता से किया जाए तो ये कुछ इस प्रकार होगा :",
      <pre className='syntax'>
        {" हर क रेंज (0,5) में :\n\tपश्य ('हेलो !')"}
      </pre>,
      <h4>परिणाम</h4>,
      <pre className="output">
        {"हेलो !\nहेलो !\nहेलो !\nहेलो !\nहेलो !"}
      </pre>,
      " उपर बताये गए उदहारण से देखा जा सकता हे की हर के प्रयोग से गणक का कार्य बहुत अधिक आसानी से कम समयकाल(time complexity) और भूकाल(space complexity) में हो जाता हैं जो की कोड को आकर्षित बनाने में भी उपयोगी हैं जो की हर व्यूह को आकर्षित बनाता हैं !",
      " इसके आलावा गणक विज्ञान (programming)में  बहुत बार हमें एक से अधिक वस्तुओ के समूह की प्रत्येक वस्तु को स्क्रीन पर दर्शाना (print) होता हैं जो की हम हर व्यूह की सहायता से बहुत आसानी से कर सकते हैं ,कुछ इस प्रकार से :-",
      <h4>उदाहरण</h4>,
      <pre>{"मान लेते हे की एक त्रम(array) जिसका नाम समूह हैं \n\t समूह =[1 ,2 ,3 ,4 ] \nबिना हर व्यूह  की सहायता से(without for loop) :"}</pre>,
      <pre className='syntax'>
        {"पश्य ( समूह[0])\n>> 1\nपश्य ( समूह[1])\n>> 2\nपश्य ( समूह[2])\n>> 3\nपश्य ( समूह[3])\n>> 4"}
      </pre>,
      <pre>
        {"हर व्यूह  की सहायता से(with for loop) :\n\tहर क रेंज  समूह में:\n\t\tपश्य (समूह)"}
      </pre>,
      <h4>परिणाम</h4>,
      <pre className="output">
        {"1\n2\n3\n4"}
      </pre>,
      <h4>अन्य उदाहरण</h4>,
      <pre>
        {"(1) एक त्रम (array)दिया गया है जिसका नाम एक हैं ,\n\tएक =['बड़ा','छोटा ','बहुत']\nत्रम एक के सभी वस्तुओ को हर व्यूह की सहायता से स्क्रीन पर दो बार दिखाए !\n\nकोड:-"}
      </pre>,
      <pre className='syntax'>
        {"हर क रेंज एक में :\n\tपश्य (क)\n\tपश्य (क)"}
      </pre>,
      <pre>{"परिणाम:-"}</pre>,
      <pre className='output'>
        {"बड़ा\nबड़ा\nछोटा\nछोटा\nबहुत\nबहुत"}
      </pre>,
      <pre>{"व्याख्या(explaination):\nहमें एक त्रम दिया गया हैं जिसका नाम एक हैं और उसमे तीन वस्तुए दी गयी हैं और हमें प्रत्येक वस्तु को दो बार स्क्रीन पर दिखाना हैं जिसके लिए हमने एक कोड लिखा हैं जिसकी पहली लाइन में हम त्रम की हर वस्तु को एक एक करके देख रहे हैं और दूसरी और तीसरी लाइन में हम हर वस्तु को पश्य की सहायता से स्क्रीन पर दिखा रहे  हैं और 'हर' व्यूह की मदद से हम ऐसा प्रत्येक वस्तु के लिए कर पा रहे हैं !"}</pre>,
      <h5>ध्यान दें(notice it):</h5>,
      <pre>{" यदि इसी कोड को हम कुछ इस तरह लिखे-\n\tहर क रेंज एक में :\n\t\tपश्य (क)\n\t\t\tपश्य (क)\n\n>>गलत कोडेनिती\t#तो हमे स्क्रीन पर गलती का सन्देश प्राप्त होगा\n#indentation error"}</pre>,
      <pre>{"सार\nहर व्यूह के अंदर हमे प्रत्येक लाइन के पहले आने वाले रिक्त स्थानो(indentation) पर ध्यान देना  जरुरी हैं वो प्रत्येक लाइन में एक समान होना अनिवार्य हैं, दिए गए कोड की दूसरी और तीसरी लाइन में रिक्त स्थान बराबर न होने के  कारन हमारी कोडनिति गलत मानी जाएगी !"}</pre>,
      <pre>
        {"(2) एक त्रम दिया गया है जिसका नाम बुक्स  हैं,\n\tबुक्स =[रामयण ,गीता,महाभारत]\nत्रम बुक्स की प्रत्येक वस्तु के बाद त्रम बुक्स  को एक बार फिर स्क्रीन पर दिखाना हैं !\n\nकोड:-"}
      </pre>,
      <pre className='syntax'>
        {"हर क रेंज बुक्स में :\n\tपश्य (क)\n\tहर द रेंज बुक्स में :\n\t\tपश्य (द)"}
      </pre>,
      <pre>{"परिणाम:-"}</pre>,
      <pre className='output'>
        {"रामयण\nरामयण\nगीता\nमहाभारत\nगीता\nरामयण\nगीता\nमहाभारत\nमहाभारत\nरामयण\nगीता\nमहाभारत"}
      </pre>,
      <h4>सारांश(summary):-</h4>,
      "प्रस्तुत लेखन  में हमने हर व्यूह के बारे में जानकारी प्राप्त की हैं जो की हमे यह बताता हैं की गणन  विज्ञान में गणक को एक प्रक्रिया को बारबार दोहराने की जरुरत नहीं हैं उसके स्थान पर गणक 'हर' व्यूह का प्रयोग कर अपना समय और कोड का समयकाल व भूकाल को काम करके  कोड को आकर्षित बना सकता हैं ! जो की हर व्यूह की उपयोगिता को गणन[ विज्ञान में  बड़ा देता हैं !",
    ],
  },
  {
    title: "भव जबतक(while) लूप",
    titleURL: "भव जबतक(while) लूप".replace(/\s+/g, "-").toLowerCase(),
    texts: [
      "किसी एक ही प्रक्रिया को एक से अधिक बार दोरोने की समस्या, जिसके बारेमे हमने 'हर' व्यूह में चर्चा की हैं उसी समस्या का समाधान हम एक और व्यूह से कर सकते हैं जिसका नाम 'जबतक' व्यूह हैं ! 'जबतक' व्यूह ठीक हर व्यूह के सामान ही गणक को कोड लिखते समय एक चीज को दौरान से बचाकर स्वयं यह कार्य कर लेता हैं!",
      "'हर' व 'जबतक' व्यूह लगभग एक ही सामान हैं अंतर सिर्फ  इतना हे की हर व्यूह का प्रयोग हम तबग करते हैं जब हमे व्यूह के अंत के बारे में जानकारी होती हैं उसकी दूसरी तरफ 'जबतक' व्यूह का प्रयोग हम कोड के अंत की जानकारी होने क बाद ही करते हें !",
      '"जबतक" व्यूह भी  गणक को अनेक बार एक चीज को दौरान से बचाकर खुद यह काम कर लेता हैं जिससे समयकाल और भूकाल दोनों की बचत होती हैं !',
      'इसे हम एक उदहारण से पूरी तरह समजने की कोशिश करेंगे ,',
      'जैसे की मान लेते हें की हमे एक मंदिर जाना है जहा तक पहुंचने के लिए हमे 100 सिडिया चढ़नी पड़ेगी जो की तय हैं इसीलिए इसे हम हर व्यूह के अंदर लेंगे इसके विपरीत अगर मानलो की हमे एक पहाड़ पर जाना हैं जो की बहुत उचाई पर हें तोह यहाँ हमे तब तक चढ़ना हें जबतक हम पहाड़ पर नहीं पहुंच जाते हैं जहा  तक पहुंचने में कितना चलना पड़ेगा यह तय नहीं हें तोह इसे हम जबतक व्यूह मे लेंगे!',
      <h4>उदाहरण</h4>,
      "यदि गणक 'हेलो !' को पांच बार स्क्रीन  पर दिखाना  चाहता हैं तो वो कुछ इस प्रकार करेगा :",
      <pre className="syntax">
        {"पश्य ('हेलो !')"}
        {
          "\n\t>> हेलो !\n"
        }
        {"पश्य ('हेलो !')"}
        {
          "\n\t>> हेलो !\n"
        }
        {"पश्य ('हेलो !')"}
        {
          "\n\t>> हेलो !\n"
        }
        {"पश्य ('हेलो !')"}
        {
          "\n\t>> हेलो !\n"
        }
        {"पश्य ('हेलो !')"}
        {
          "\n\t>> हेलो !"
        }
      </pre>,
      'लेकिन यदि इसी कोड को जबतक व्यूह  की सहायता से किया जाए तो ये कुछ इस प्रकार होगा :',
      <pre className='syntax'>
        {'क=0\nजबतक क<5:\n\tपश्य ("हेलो !")\n\tक=क+1'}
      </pre>,
      <h4>परिणाम</h4>,
      <pre className='output'>
        {"हेलो !\nहेलो !\nहेलो !\nहेलो !\nहेलो !"}
      </pre>,
      "उपर बताये गए उदहारण से देखा जा सकता हे की जबतक के प्रयोग से गणक का कार्य बहुत अधिक आसानी से कम समयकाल(time complexity) और भूकाल (space complexity)में हो जाता हैं जो की कोड को आकर्षित बनाने में भी उपयोगी हैं जो की जबतक व्यूह को आकर्षित बनाता हैं !",
      '"जबतक" व्यूह के  मुख्य नियम :',
      '(क) चर की स्थिति की जांच करे (check the condition)',
      '(ख) कोड को प्रिंट कराये (print the statement)',
      '(ग ) चर को अपडेट करे (update the variable)',
      'अधिकतर  देखा गया हैं की "जबतक" व्यूह का प्रयोग एक  से ज्यादा स्थति को जांच करने के लिए जाता हैं| जैसे : ',
      <pre className='syntax'>
        {'क=45\nख=80\nजबतक क<50 च  ख<100 :\n\tपश्य(क,ख)\n\tक=क+1\n\tख=ख+1'}
      </pre>,
      <h4>परिणाम</h4>,
      <pre className='output'>
        {'45 80\n46 81\n47 82\n48 83\n49 84'}
      </pre>,
      'जबतक व्यूह का प्रयोग लगातार चलने वाले कोड के लिए भी किया जाता हें ,जैसे :',
      <pre>
        {'जबतक सत :\n\tपश्य("हेलो!")'}
      </pre>,
      'सत स्थति हमेसा ही सही होगी तो यह कोड लगातार प्रिंट होता रहेगा इसी प्रकार के व्यूह को अंत करने के लिए दूसरे बयान का प्रयोग किया जाता हें जैसेकि "खंडन" (break) जिसके बारे में हम आगे विस्तार से जानकारी प्राप्त करेंगे !',
      <h4>सारांश:-</h4>,
      'प्रस्तुत लेखन में हमने "जबतक" व्यूह के बारे में जाना हैं जिससे हमे यह पता चलता हैं की एक प्रक्रिया कोको दोहराने से बचने के लिए हम हर व्यूह के साथ साथ जबतक व्यूह का प्रयोग भी कर सकते हैं ,जबतक व्यूह का प्रयोग अंत निश्चित न होने पर किया जाता हैं !',
    ],
  },
  {
    title: "भव प्रोग्रामिंग भाषा",
    titleURL: "भव प्रोग्रामिंग भाषा".replace(/\s+/g, "-").toLowerCase(),
    texts: [
      "The for loop is used to iterate the statements or a part of the program several times. It is frequently used to traverse the data structures like list, tuple, or dictionary.",
    ],
  },
];

export default articlesHindi;